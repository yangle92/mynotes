## k8s资源管理
cgroup 资源控制 oom
namespace 资源隔离，进程隔离，网络隔离

## yaml 常量
	
kubectl create namespace dev

kubectl get pods -n kube-system

## label

kubectl label pod nginx version=1.0 -n dev
kubectl get pod nginx -n dev --show-labels
kubectl get pod -l version=1.0 -n dev --show-labels

## deployment  - pod控制器
kubectl get deployment -n test

kubectl describe deploy nginx  -n test 

kubectl delete deployment nginx -n test 

## service 
将pod暴露到外网访问

kubectl expose deployment nginx --name=svc-nginx1 --type=NodePort --port=80 --target-port=80 -n dev
		--type=ClusterIP
		--type=NodePort

kubectl get service svc-nginx1 -o wide -n dev

kubectl api-resources


kubectl explain pod.metadata
				pod.spec
kubectl explain pod.spec.containers

				
在kubernetes中基本所有资源的一级属性都是一样的，主要包含5个部分：
apiVersion   <string>：版本，有kubernetes内部定义，版本号必须用kubectl api-versions查询。
kind <string>：类型，有kubernetes内部定义，类型必须用kubectl api-resources查询。
metadata   <Object>：元数据，主要是资源标识和说明，常用的有name、namespace、labels等。
spec <Object>：描述，这是配置中最重要的一部分，里面是对各种资源配置的详细描述。
status  <Object>：状态信息，里面的内容不需要定义，由kubernetes自动生成。
在上面的属性中，spec是接下来研究的重点，继续看下它的常见子属性：
containers   <[]Object>：容器列表，用于定义容器的详细信息。
nodeName <String>：根据nodeName的值将Pod调度到指定的Node节点上。
nodeSelector   <map[]> ：根据NodeSelector中定义的信息选择该Pod调度到包含这些Label的Node上。
hostNetwork  <boolean>：是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络。
volumes      <[]Object> ：存储卷，用于定义Pod上面挂载的存储信息。
restartPolicy	<string>：重启策略，表示Pod在遇到故障的时候的处理策略。


## 存储卷
  ○ 简单存储：EmptyDir、HostPath、NFS。
  ○ 高级存储：PV、PVC。
  ○ 配置存储：ConfigMap、Secret。
 
### EmptyDir
EmptyDir是在Pod被分配到Node时创建的，它的初始内容为空，并且无须指定宿主机上对应的目录文件，因为kubernetes会自动分配一个目录，当Pod销毁时，EmptyDir中的数据也会被永久删除
